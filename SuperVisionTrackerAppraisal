import React, { useState, useEffect } from 'react';
import { Calendar, Clock, UserCheck, FileText, AlertTriangle } from 'lucide-react';

export default function SupervisionDashboard() {
  const [selectedStaff, setSelectedStaff] = useState(null);
  const [supervisionData, setSupervisionData] = useState({});
  const [upcomingSupervisions, setUpcomingSupervisions] = useState([]);

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="bg-white shadow rounded-lg p-6 mb-8">
          <div className="flex justify-between items-center">
            <h1 className="text-2xl font-bold text-gray-900">Supervision Management</h1>
            <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
              New Supervision
            </button>
          </div>
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Upcoming Supervisions */}
          <div className="bg-white shadow rounded-lg p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Upcoming Supervisions</h2>
            <div className="space-y-4">
              {upcomingSupervisions.map((supervision) => (
                <SupervisionCard key={supervision.id} supervision={supervision} />
              ))}
            </div>
          </div>

          {/* Staff Overview */}
          <div className="bg-white shadow rounded-lg p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Staff Overview</h2>
            <div className="space-y-4">
              <SupervisionMetrics />
            </div>
          </div>

          {/* Action Items */}
          <div className="bg-white shadow rounded-lg p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Action Items</h2>
            <div className="space-y-4">
              <ActionItems />
            </div>
          </div>
        </div>

        {/* Detailed View */}
        {selectedStaff && (
          <div className="mt-8 bg-white shadow rounded-lg p-6">
            <StaffSupervisionDetail staffId={selectedStaff} />
          </div>
        )}
      </div>
    </div>
  );
}

function SupervisionCard({ supervision }) {
  return (
    <div className="border rounded-lg p-4 hover:shadow-md transition-shadow">
      <div className="flex justify-between items-start">
        <div>
          <h3 className="font-medium text-gray-900">{supervision.staffName}</h3>
          <p className="text-sm text-gray-500">{supervision.type}</p>
        </div>
        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
          supervision.status === 'due' ? 'bg-yellow-100 text-yellow-800' :
          supervision.status === 'overdue' ? 'bg-red-100 text-red-800' :
          'bg-green-100 text-green-800'
        }`}>
          {supervision.status}
        </span>
      </div>
      <div className="mt-4 flex items-center text-sm text-gray-500">
        <Calendar className="h-4 w-4 mr-2" />
        {supervision.date}
      </div>
    </div>
  );
}

function SupervisionMetrics() {
  const metrics = {
    completed: 24,
    upcoming: 8,
    overdue: 3,
    completionRate: '89%'
  };

  return (
    <div className="grid grid-cols-2 gap-4">
      <MetricCard
        title="Completed"
        value={metrics.completed}
        icon={<UserCheck className="h-5 w-5 text-green-500" />}
      />
      <MetricCard
        title="Upcoming"
        value={metrics.upcoming}
        icon={<Calendar className="h-5 w-5 text-blue-500" />}
      />
      <MetricCard
        title="Overdue"
        value={metrics.overdue}
        icon={<AlertTriangle className="h-5 w-5 text-red-500" />}
      />
      <MetricCard
        title="Completion Rate"
        value={metrics.completionRate}
        icon={<FileText className="h-5 w-5 text-purple-500" />}
      />
    </div>
  );
}

function MetricCard({ title, value, icon }) {
  return (
    <div className="bg-gray-50 rounded-lg p-4">
      <div className="flex items-center justify-between">
        {icon}
        <h4 className="text-sm font-medium text-gray-500">{title}</h4>
      </div>
      <p className="mt-2 text-2xl font-semibold text-gray-900">{value}</p>
    </div>
  );
}

function ActionItems() {
  const actions = [
    {
      id: 1,
      description: "Complete mandatory training",
      dueDate: "2024-11-03",
      priority: "high"
    },
    {
      id: 2,
      description: "Update care plan documentation",
      dueDate: "2024-11-05",
      priority: "medium"
    }
  ];

  return (
    <div className="space-y-4">
      {actions.map(action => (
        <div key={action.id} className="flex items-center justify-between p-4 border rounded-lg">
          <div>
            <p className="font-medium text-gray-900">{action.description}</p>
            <p className="text-sm text-gray-500">Due: {action.dueDate}</p>
          </div>
          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
            action.priority === 'high' ? 'bg-red-100 text-red-800' :
            action.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
            'bg-green-100 text-green-800'
          }`}>
            {action.priority}
          </span>
        </div>
      ))}
    </div>
  );
}

function GoalInput({ goals, setGoals }) {
  const addGoal = () => setGoals([...goals, { description: "", status: "In Progress" }]);

  return (
    <div>
      <h3>Goals</h3>
      {goals.map((goal, index) => (
        <div key={index}>
          <input
            type="text"
            value={goal.description}
            onChange={(e) => {
              const updatedGoals = [...goals];
              updatedGoals[index].description = e.target.value;
              setGoals(updatedGoals);
            }}
          />
          <select
            value={goal.status}
            onChange={(e) => {
              const updatedGoals = [...goals];
              updatedGoals[index].status = e.target.value;
              setGoals(updatedGoals);
            }}
          >
            <option value="In Progress">In Progress</option>
            <option value="Completed">Completed</option>
            <option value="Not Met">Not Met</option>
          </select>
        </div>
      ))}
      <button onClick={addGoal}>Add Goal</button>
    </div>
  );
}
